LED Controller

I2C interface:
  I2C Addr: 0x32 (50)

  Requests from on high:
    0-6: Set Report to send.  6 has EEPROM addr (1 byte), the rest have no data.
    8<#rows>: Set num_rows
    9<EEPROM_addr><byte>: Store <byte> at <EEPROM_addr>
    10<ndisp>: Set num_numeric_displays
    11<ndisp><size><offset>: Set size, offset for ndisp
    12<nalpha>: Set num_alpha_strings
    13<str#><#displays><index>: Set #displays, index for str#
    14<led>: turn on led
    15<led>: turn off led
    16<byte><8bits>: set 8 bits at byte addr
    17<word><16bits>: set 16 bits at byte addr, 16 bits sent MSB first (big_endian)
    18<disp><digit#><value><dp>: load digit
    19<disp><value_s16><dec_place>: load numeric
    20<disp><note><sharp_flat>: load note
    21<disp><sharp_flat>: load sharp_flat
    22<str><string>: load string
    23: test led order
    24: test numeric decoder
    25: test alpha decoder
    26<Errno><Err_data>: set Errno, Err_data

  Reports to on high:
    0: Errno, Err_data (2 bytes total)
    1: num_rows, NUM_COLS, Num_numeric_displays, Num_alpha_displays, EEPROM_AVAIL,
       EEPROM_USED (6 bytes total)
    2: numeric_display_size for each numeric_display (Num_numeric_displays bytes total)
    3: numeric_display_offset for each numeric_display (Num_numeric_displays bytes total)
    4: Cycle_time (uSec, 4 bytes total)
    5: alpha_num_chars, alpha_index for each string (2 * Num_alpha_strings bytes total)
    6: next stored EEPROM byte (1 byte, EEPROM addr auto increments)


Error Codes:

  Range  Function
  1-39   receiveRequest
  41-59  sendReport
  61-69  other sketch_led.ino
  71-79  step.ino
  81-89  alpha_displays.ino
  91-109  numeric_displays.ino

  Errno, Err_data
     1      N/A       step_receiveRequest took too long after last step call
     2   How_many     I2C request 0-5, invalid command length, must be 1
     3   How_many     I2C request 6, invalid command length, must be 2
     4  EEPROM_addr   I2C request 6, invalid EEPROM_addr, must be < NUM_EEPROM_USED
     5   How_many     I2C request 8, invalid command length, must be 2
     6   Num_rows     I2C request 8, invalid num_rows, must be < NUM_ROWS
     7   How_many     I2C request 9, invalid command length, must be 3
     8  EEPROM_addr   I2C request 9, invalid EEPROM_addr, must be < EEPROM_AVAIL
     9   How_many     I2C request 10, invalid command length, must be 2
    10     disp       I2C request 10, invalid numeric display#, must be < MAX_NUMERIC_DISPLAYS
    11   How_many     I2C request 11, invalid command length, must be 4
    12     disp       I2C request 11, invalid numeric display#, must be < Num_numeric_displays
    13     size       I2C request 11, invalid size, must be <= MAX_NUMERIC_DISPLAY_SIZE
    14    offset      I2C request 11, invalid offset, must be < Num_rows*NUM_COLS/8 - 2*size
    15   How_many     I2C request 12, invalid command length, must be 2
    16   Num_strs     I2C request 12, invalid number of strings, must be < MAX_NUM_STRINGS
    17   How_many     I2C request 13, invalid command length, must be 4
    18     str#       I2C request 13, invalid str#, must be < Num_alpha_strings
    19    max_len     I2C request 13, invalid max length, must be <= MAX_STRING_LEN
    20     index      I2C request 13, invalid index, must be < Num_rows * NUM_COLS / 16
    21   How_many     I2C request 14, invalid command length, must be 2
    22   How_many     I2C request 15, invalid command length, must be 2
    23   How_many     I2C request 16, invalid command length, must be 3
    24   How_many     I2C request 17, invalid command length, must be 4
    25   How_many     I2C request 18, invalid command length, must be 5
    26   How_many     I2C request 19, invalid command length, must be 5
    27   How_many     I2C request 20, invalid command length, must be 4
    28   How_many     I2C request 21, invalid command length, must be 3
    29   How_many     I2C request 22 (load string), request not long enough, must be at least 2
    30   How_many     I2C request 22 (load string), string too long, must be <= MAX_STRING_LEN
    31   How_many     I2C request 26 (set Errno, Err_data), invalid command length, must be 3
    34    req#        Invalid I2C request
    35     N/A        ReceiveRequest running when another receiveRequest comes in
    41     N/A        step_sendReport took too long after last step call
    42 EEPROM_addr    EEPROM_addr >= NUM_EEPROM_USED
    43 len_written    sendReport 0 (Errno, Err_data): Wire.write(Errno) returned wrong length, expected 1
    44 len_written    sendReport 0 (Errno, Err_data): Wire.write(Err_data) returned wrong length, expected 1
    45 len_written    sendReport 1 (settings): Wire.write(Num_rows) returned wrong length, expected 1
    46 len_written    sendReport 1 (settings): Wire.write(NUM_COLS) returned wrong length, expected 1
    47 len_written    sendReport 1 (settings): Wire.write(Num_numeric_displays) returned wrong length, expected 1
    48 len_written    sendReport 1 (settings): Wire.write(Num_alpha_strings) returned wrong length, expected 1
    49 len_written    sendReport 1 (settings): Wire.write(EEPROM_AVAIL) returned wrong length, expected 1
    50 len_written    sendReport 1 (settings): Wire.write(EEPROM_USED) returned wrong length, expected 1
    51 len_written    sendReport 2 (numeric_display_sizes): Wire.write(Numeric_display_size) returned wrong length, expected 1
    52 len_written    sendReport 3 (numeric_display_offsets): Wire.write(Numeric_display_offset) returned wrong length, expected 1
    53 len_written    sendReport 4 (Timeout_cycle_time): Wire.write(EEPROM_USED) returned wrong length, expected 4
    54 len_written    sendReport 5 (alpha_num_chars, alpha_index): Wire.write(Alpha_num_chars) returned wrong length, expected 1
    55 len_written    sendReport 5 (alpha_num_chars, alpha_index): Wire.write(Alpha_index) returned wrong length, expected 1
    56 len_written    sendReport 6 (next stored EEPROM byte): Wire.write(EEPROM) returned wrong length, expected 1
    58   Report       sendReport: invalid Report number
    61   step_fun     schedule_step_fun: invalid step_fun, >= NUM_STEP_FUNS
    62     N/A        loop took too long to figure out Next_step_fun
    63     N/A        loop took too long with no Next_Step_fun!! (how could this happen??)
    71 EEPROM_#rows   setup_step, invalid Num_rows in EEPROM
    72   bit_num      led_on: invalid bit_num, must be < Num_rows * NUM_COLS
    73   bit_num      led_off: invalid bit_num, must be < Num_rows * NUM_COLS
    81 EEPROM_#strs   setup_alpha_displays: invalid Num_alpha_strings in EEPROM
    82 EEPROM_#chars  setup_alpha_displays: invalid Alpha_num_chars in EEPROM
    83 EEPROM_index   setup_alpha_displays: invalid Alpha_index in EEPROM
    84   str_num      load_string: invalid string_num, must be < MAX_NUM_STRINGS
    85   strlen       load_string: invalid strlen, must be <= MAX_STRING_LEN
    91 EEPROM_#disp   setup_numeric_displays: invalid Num_numeric_displays in EEPROM
    92 EEPROM_size    setup_numeric_displays: invalid Numeric_display_size in EEPROM
    93 EEPROM_offst   setup_numeric_displays: invalid Numeric_display_offset in EEPROM
    94    disp        load_digit: invalid display_num, must be < Num_numeric_displays
    95    digit       load_digit: invalid digit_num, must be < Numeric_display_size
    96    value       load_digit: invalid value, must be < 11
    97    disp        load_numeric: invalid display_num, must be Num_numeric_displays
    98   dec_pl       load_numeric: invalid decimal_place, must be <= Numeric_display_size
    99  value/10      load_numeric: invalid value, too big to fit
    100   disp        load_sharp_flat: invalid display_num, must be < Num_numeric_displays
    101 sharp_flat    load_sharp_flat: invalid sharp_flat, must be <= 2
    102   disp        load_note: invalid display_num, must be < Num_numeric_displays
    103   note        load_note: invalid note, must be <= 6 (A-G)
    104 sharp_flat    load_note: invalid sharp_flat, must be <= 2


// vim: sw=2
